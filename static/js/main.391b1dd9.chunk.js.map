{"version":3,"sources":["components/BackToTop.js","components/Search.js","components/LoadingIndicator.js","components/BaseList.js","components/EpisodeLine.js","components/useHover.js","components/EpisodeList.js","components/InfiniteScrollWrapper.js","components/Episodes.js","components/Character.js","components/CharacterList.js","components/Episode.js","App.js","serviceWorker.js","index.js"],"names":["handleClick","window","scroll","top","left","behavior","Fab","styled","button","BackToTop","onClick","style","fontSize","Search","searchTerm","onSearch","useState","term","setTerm","delayed","debounce","t","type","placeholder","value","onChange","event","target","LoadingIndicator","loading","children","display","justifyContent","my","flexGrow","BaseList","items","renderItem","maxVisibleItemCount","rest","expand","setExpand","itemCount","length","isInitialFetch","Boolean","map","item","i","EpisodeLine","id","name","air_date","episode","characters","isHovered","hoverProps","setValue","divRef","useRef","handleMouseOver","handleMouseOut","useEffect","node","current","addEventListener","removeEventListener","useHover","hoverRef","to","textAlign","ref","position","className","title","key","EpisodeList","episodes","InfiniteScrollWrapper","hasNextPage","onLoadMore","infiniteContainerRef","useInfiniteScroll","GET_EPISODES","gql","EpisodesCard","div","Episodes","setSearchTerm","useQuery","variables","page","filter","error","data","fetchMore","results","next","info","padding","width","val","updateQuery","prevResult","fetchMoreResult","newEpisodes","produce","draft","push","Character","image","alt","height","src","CharacterList","character","EpisodeCard","EpisodeName","EpisodeData","GET_EPISODE","Episode","useParams","console","log","right","client","ApolloClient","uri","cache","InMemoryCache","typePolicies","Query","fields","search","relayStylePagination","App","path","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.391b1dd9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nfunction handleClick() {\r\n  window.scroll({\r\n    top: 0,\r\n    left: 0,\r\n\t behavior: \"smooth\",\r\n  });\r\n}\r\n\r\nconst Fab = styled.button `\r\n\tposition: \"fixed\";\r\n\tbottom: 20;\r\n\tright: 20;\r\n\tzIndex: 1999;\r\n\tborder-width: 1px;\r\n\tborder-radius: 15px;\r\n\twidth: 30px;\r\n\theight: 30px;\r\n`\r\nfunction BackToTop() {\r\n  return (\r\n\t<Fab onClick={handleClick}>\r\n\t\t<span style ={{fontSize: '25px'}}>^</span>\r\n\t</Fab>\r\n  );\r\n}\r\n\r\nexport default BackToTop;\r\n","import React, { useState } from 'react';\r\nimport {debounce} from 'lodash';\r\n\r\n\r\nexport default function Search({searchTerm, onSearch}) {\r\n\r\n\tconst [term, setTerm] = useState(searchTerm);\r\n\r\n\tconst delayed = debounce((t) => onSearch(t), 1000)\r\n\r\n\tconst handleChange = event => {\r\n\t\tsetTerm(event.target.value);\r\n\t\tdelayed(event.target.value)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<input\r\n      \ttype=\"text\"\r\n\t\t\tplaceholder=\"Search\"\r\n\t\t\tvalue={term}\t\t  \r\n\t\t\tonChange={handleChange}\r\n      />\r\n\t)\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nfunction LoadingIndicator({ loading, children }) {\r\n  return loading ? (\r\n    <div display=\"flex\" justifyContent=\"center\" my={2} flexGrow={1}>\r\n      {/* size={48} */}\r\n    </div>\r\n  ) : (\r\n    <>{children}</> || null\r\n  );\r\n}\r\n\r\nexport default LoadingIndicator;\r\n","import React, { useState } from \"react\";\r\nimport LoadingIndicator from \"./LoadingIndicator\";\r\n\r\n\r\nfunction BaseList({ items = [], renderItem, loading, maxVisibleItemCount,  ...rest }) {\r\n  const [expand, setExpand] = useState(!maxVisibleItemCount);\r\n\r\n  function toggleExpand() {\r\n    setExpand(!expand);\r\n  }\r\n\r\n  const itemCount = items.length;\r\n  const isInitialFetch = Boolean(loading && !itemCount);\r\n\r\n  return (\r\n    <LoadingIndicator loading={isInitialFetch}>\r\n      <tbody {...rest}>\r\n        {items?.map((item, i) =>\r\n          item && (!maxVisibleItemCount || expand || i < maxVisibleItemCount)\r\n            ? renderItem(item, i)\r\n            : null,\r\n        )}\r\n        {maxVisibleItemCount && itemCount && itemCount > maxVisibleItemCount ? (\r\n          <tr button onClick={toggleExpand}>\r\n            <span>{`SHOW ${expand ? \"LESS\" : \"MORE\"}`}</span>\r\n          </tr>\r\n        ) : null}\r\n        {loading ? (\r\n          <tr>\r\n            <LoadingIndicator loading />\r\n          </tr>\r\n        ) : null}\r\n      </tbody>\r\n    </LoadingIndicator>\r\n  );\r\n}\r\n\r\nexport default BaseList;\r\n","import React from 'react';\r\nimport { useHover } from './useHover'\r\nimport { Link  } from 'react-router-dom'\r\n\r\n\r\nexport default function EpisodeLine({id, name, air_date, episode, characters}) {\r\n\r\n\tconst [hoverRef, hoverProps] = useHover();\r\n\r\n\treturn (\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\t<Link to={`/episode/${id}`}>{name}</Link>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{id} {episode},  {air_date}\r\n\t\t\t\t</div>\r\n\t\t\t</td>\r\n\t\t\t<td style={{textAlign: 'center'}}>\r\n\t\t\t\t<div ref={hoverRef} style={{position: 'relative'}}>\r\n\t\t\t\t\t#{characters.length} \r\n\t\t\t\t\t{hoverProps.isHovered &&\r\n\t\t\t\t\t\t<button className=\"show-more\" title=\"Edit\" onClick={() => {}}>\r\n\t\t\t\t\t\t\tShow\r\n\t\t\t\t\t\t</button>}\r\n\t\t\t\t</div>\r\n\t\t\t</td>\r\n\t\t</tr>\t\t\r\n\t)\r\n}","import { useRef, useState, useEffect } from 'react';\r\n\r\n\r\n// Hook\r\nexport function useHover()  {\r\n\tconst [hoverProps, setValue] = useState({ isHovered: false });\r\n \r\n\tconst divRef = useRef(null);\r\n \r\n\tconst handleMouseOver = () => setValue({ isHovered: true });\r\n\tconst handleMouseOut = () => setValue({ isHovered: false });\r\n \r\n\tuseEffect(\r\n\t  () => {\r\n\t\t const node = divRef.current;\r\n\t\t if (node) {\r\n\t\t\tnode.addEventListener('mouseenter', () => handleMouseOver());\r\n\t\t\tnode.addEventListener('mouseleave', () => handleMouseOut());\r\n\t\t\treturn () => {\r\n\t\t\t\tnode.removeEventListener('mouseenter', () => handleMouseOver());\r\n\t\t\t\tnode.removeEventListener('mouseleave', () => handleMouseOut());\r\n\t\t\t};\r\n\t\t }\r\n\t  }, [divRef.current] // Recall only if ref changes\r\n\t);\r\n \r\n\treturn [divRef, hoverProps];\r\n}\r\n\r\n","import React from \"react\";\r\nimport BaseList from \"./BaseList\";\r\nimport EpisodeLine from \"./EpisodeLine\";\r\n\r\n\r\nfunction renderItem(episode) {\r\n  if (episode.id) {\r\n    return <EpisodeLine key={episode.id} {...episode} />;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction EpisodeList({ episodes, loading, maxVisibleItemCount }) {\r\n  return (\r\n    <BaseList\r\n      items={episodes}\r\n      loading={loading}\r\n      maxVisibleItemCount={maxVisibleItemCount}\r\n      renderItem={renderItem}\r\n    >\r\n      );\r\n    </BaseList>\r\n  );\r\n}\r\n\r\nexport default EpisodeList;\r\n","import React from \"react\";\r\nimport useInfiniteScroll from \"react-infinite-scroll-hook\";\r\n\r\nfunction InfiniteScrollWrapper({\r\n  hasNextPage,\r\n  loading,\r\n  onLoadMore,\r\n  children,\r\n}) {\r\n  const infiniteContainerRef = useInfiniteScroll({\r\n    hasNextPage,\r\n    loading,\r\n    onLoadMore,\r\n  });\r\n\r\n  return <tbody ref={infiniteContainerRef}>{children}</tbody>;\r\n}\r\n\r\nexport default InfiniteScrollWrapper;\r\n","import React, { useState } from 'react';\r\nimport styled from \"styled-components\";\r\nimport produce from \"immer\";\r\n\r\nimport Search from './Search'\r\nimport EpisodeList from './EpisodeList'\r\n\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport InfiniteScrollWrapper from \"./InfiniteScrollWrapper\"\r\n\r\nconst GET_EPISODES = gql`\r\n\tquery episodes($page: Int, $filter: String) {\r\n\t\tepisodes(page: $page, filter: { name: $filter }) {\r\n\t\t\tresults {\r\n\t\t\t\tid\r\n\t\t\t\tname\r\n\t\t\t\tepisode\r\n\t\t\t\tair_date\r\n\t\t\t\tcharacters {\r\n\t\t\t\t\tid\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tinfo {\r\n\t\t\t\tnext\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst EpisodesCard = styled.div`\r\n\tposition: 'relative'\r\n\tbackground-color: gainsboro;\r\n\tborder-radius: 10px;\r\n\tbox-shadow: 3px 3px 25px -5px rgba(0,0,0,0.47);\r\n\tcolor: #1A1A1A;\r\n\tdisplay: inline-block;\r\n\tmargin: 20px 15px;\r\n\twidth: 98%;\r\n\toverflow: hidden;\r\n`;\r\n\r\n\r\nconst NavBar = styled.div`\r\n\tdisplay: flex;\r\n\tjustify-content: flex-end;\r\n\tmargin: 20px 15px;\r\n\twidth: 90%;\r\n\toverflow: hidden;\r\n`;\r\n\r\n\r\nconst Button = styled.button`\r\n\tfont-size: 1em;\r\n\tmargin: 1em;\r\n\tpadding: 0.25em 1em;\r\n\tborder-width: 1px;\r\n\tborder-radius: 3px;\r\n`;\r\n\r\n\r\nexport default function Episodes() {\r\n\tconst [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n\t//console.log ('zovem bre filter, page:', page, ' searchTerm:', searchTerm)\r\n\tconst { loading, error, data, fetchMore } = useQuery(GET_EPISODES, { \r\n\t\tvariables: { page: 1, filter: searchTerm } \r\n\t});\r\n\t\r\n\tif (error) return <p>Error :(</p>;\r\n\r\n\tconst { episodes } = data || {};\r\n\r\n\tconst results = episodes?.results;\r\n\tconst next = episodes?.info?.next;\r\n\tconst hasNextPage = !!next;\r\n\t\r\n\treturn (\r\n\t\t<EpisodesCard>\r\n\r\n\t\t\t<div style={{padding:'5px 10px', width: '20%'}}>\r\n\t\t\t\t<Search searchTerm={searchTerm} onSearch={(val) => setSearchTerm(val)}></Search>\r\n\t\t\t</div>\r\n\r\n\t\t\t<table>\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th>Episode</th>\r\n\t\t\t\t\t\t<th style={{ textAlign: 'center', width: '130px'}}>#Characters</th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\t\t\r\n\t\t\t\t<InfiniteScrollWrapper\r\n\t\t\t\t\thasNextPage={hasNextPage}\r\n\t\t\t\t\tloading={loading}\r\n\t\t\t\t\tonLoadMore={() =>\r\n\t\t\t\t\t\tfetchMore({\r\n\t\t\t\t\t\t\t// This breaks \"@apollo/client 3\".\r\n\t\t\t\t\t\t\t// It doesn't toggle \"loading\" even if the \"notifyOnNetworkStatusChange\" is set to \"true\".\r\n\t\t\t\t\t\t\t// query: GET_EPISODES,\r\n\t\t\t\t\t\t\tvariables: { page: next, filter: searchTerm },\r\n\t\t\t\t\t\t\tupdateQuery: (prevResult, { fetchMoreResult }) => {\r\n\t\t\t\t\t\t\t\tconst newEpisodes = fetchMoreResult?.episodes;\r\n\t\t\t\t\t\t\t\tconst newData = produce(prevResult, (draft) => {\r\n\t\t\t\t\t\t\t\t\tlet { episodes } = draft;\r\n\t\t\t\t\t\t\t\t\tif (episodes?.results && episodes?.info && newEpisodes?.results) {\r\n\t\t\t\t\t\t\t\t\t\tepisodes.results.push(...newEpisodes.results);\r\n\t\t\t\t\t\t\t\t\t\tepisodes.info = newEpisodes.info;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\treturn newData;\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t>\r\n\t\t\t\t\t<EpisodeList episodes={results} loading={loading || hasNextPage} />\r\n\t\t\t\t</InfiniteScrollWrapper>\r\n\t\t\t</table>\r\n\t\t</EpisodesCard>\r\n\t)\r\n\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function Character({id, name, episode, image}) {\r\n\treturn <div key={id} className=\"item\">\r\n\t\t<img alt=\"Actor\" style={{ width:120, height: 120}} src={image}></img>\r\n\t\t<div>{name}</div>\r\n\t\t<div>Episodes: {episode.length}</div> \r\n\t</div>\r\n} ","import React from 'react';\r\nimport Character from './Character'\r\nimport'./CharacterList.css'\r\n\r\n\r\nexport default function CharacterList({characters}) {\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t{characters.map(character => <Character key={character.id} {...character} />)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport CharacterList from './CharacterList'\r\n\r\n\r\nimport { useQuery, gql } from '@apollo/client';\r\n\r\nconst EpisodeCard = styled.div`\r\n\tposition: 'relative'\r\n\tbackground-color: gainsboro;\r\n\tborder-radius: 10px;\r\n\tbox-shadow: 3px 3px 25px -5px rgba(0,0,0,0.47);\r\n\tcolor: #1A1A1A;\r\n\tdisplay: inline-block;\r\n\tmargin: 20px 15px;\r\n\tmmmax-width: 300px;\r\n\toverflow: hidden;\r\n`;\r\n\r\nconst EpisodeName = styled.div`\r\n  font-size: 1.66rem;\r\n`;\r\n\r\nconst EpisodeData = styled.div`\r\n  padding: 0 15px;\r\n`;\r\n\r\nconst GET_EPISODE = gql`\r\n\tquery episode($id: ID!) {\r\n\t\tepisode(id: $id) {\r\n\t\t\tid\r\n\t\t\tname\r\n\t\t\tair_date\r\n\t\t\tepisode\r\n\t\t\t created\r\n\t\t\tcharacters {\r\n\t\t\t  id\r\n\t\t\t  name\r\n\t\t\t  status\r\n\t\t\t  species\r\n\t\t\t  gender\r\n\t\t\t  location {\r\n\t\t\t\t name\r\n\t\t\t  }\r\n\t\t\t  image\r\n\t\t\t  created\r\n\t\t\t  episode {\r\n\t\t\t\t  id\r\n\t\t\t  }\r\n\t\t }\r\n\t\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport default function Episode() {\r\n\tlet { id } = useParams();\r\n\r\n\tconst { loading, error, data } = useQuery(GET_EPISODE, { \r\n\t\tvariables: { id } \r\n\t});\r\n\r\n\tif (data)\r\n\t\tconsole.log('data', data)\r\n\t\r\n\tif (loading) return <p>Loading...</p>;\r\n\tif (error) return <p>Error :(</p>;\r\n\r\n\tconst { name, air_date,\tepisode,\tcharacters} = data.episode;\r\n\r\n\treturn (\r\n\t\t<EpisodeCard>\r\n\r\n\t\t\t<EpisodeData>\r\n\t\t\t\t<EpisodeName>{name}</EpisodeName>\r\n\t\t\t\t<div>{episode}</div>\r\n\t\t\t\t<div>AIR DATE: {air_date}</div>\r\n\t\t\t</EpisodeData>\r\n\r\n\t\t\t<h4 style={{padding: '0px 15px'}}>Characters</h4>\r\n\t\t\t<CharacterList characters={characters} />\r\n\t\t\t<div style={{ position: 'absolute', right: '30px', top: '30px'}}>\r\n\t\t\t\t<Link to={`/`}>Back to Episodes</Link>\r\n\t\t\t</div>\r\n  \t\t</EpisodeCard>\r\n\t)\r\n}","import React from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport BackToTop from './components/BackToTop'\n\nimport { \n\tApolloProvider, \n\tApolloClient, \n\tInMemoryCache\n} from '@apollo/client';\n\nimport { relayStylePagination } from \"@apollo/client/utilities\";\n\nimport Episodes from './components/Episodes'\nimport Episode from './components/Episode'\n\nconst client = new ApolloClient({\n\turi: \"https://rickandmortyapi.com/graphql\",\n\tcache: new InMemoryCache({\n\t  typePolicies: {\n\t\t Query: {\n\t\t\tfields: {\n\t\t\t  // Reusable helper function to generate a field\n\t\t\t  // policy for the Query.search field, keyed by\n\t\t\t  // search query:\n\t\t\t  search: relayStylePagination([\"query\"]),\n\t\t\t},\n\t\t },\n\t  },\n\t}),\n });\n\n\n\n\nfunction App() {\n  return (\n\t<Router>\n\t\t<ApolloProvider client={client}>\n\t\t\t<>\n\t\t\t<div>\n\t\t\t\t{/* <nav><ul><li><Link to=\"/\">Home</Link></li></ul></nav> */}\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/episode/:id\">\n\t\t\t\t\t\t<Episode />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t\t<Episodes />\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t\t<BackToTop />\n\t\t\t</>\n\t \t</ApolloProvider>\n\t </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}