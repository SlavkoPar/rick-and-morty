{"version":3,"sources":["components/Search.js","components/EpisodeLine.js","components/useHover.js","components/Episodes.js","components/Character.js","components/CharacterList.js","components/Episode.js","App.js","serviceWorker.js","index.js"],"names":["Search","searchTerm","onSearch","useState","term","setTerm","delayed","debounce","t","type","placeholder","value","onChange","event","target","EpisodeLine","id","name","air_date","episode","characters","isHovered","hoverProps","setValue","divRef","useRef","handleMouseOver","handleMouseOut","useEffect","node","current","addEventListener","removeEventListener","useHover","hoverRef","to","style","textAlign","ref","position","length","className","title","onClick","GET_EPISODES","gql","EpisodesCard","styled","div","NavBar","Button","button","pg","Episodes","page","setPage","setSearchTerm","console","log","useQuery","variables","filter","loading","error","data","fetchMore","results","episodes","hasMore","info","next","padding","width","val","sty","map","key","fetchPolicy","updateQuery","previousResult","fetchMoreResult","Character","image","alt","height","src","CharacterList","character","EpisodeCard","EpisodeName","EpisodeData","GET_EPISODE","Episode","useParams","right","top","client","ApolloClient","uri","cache","InMemoryCache","typePolicies","Query","fields","search","relayStylePagination","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3e53c594.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {debounce} from 'lodash';\r\n\r\n\r\nexport default function Search({searchTerm, onSearch}) {\r\n\r\n\tconst [term, setTerm] = useState(searchTerm);\r\n\r\n\tconst delayed = debounce((t) => onSearch(t), 1000)\r\n\r\n\tconst handleChange = event => {\r\n\t\tsetTerm(event.target.value);\r\n\t\tdelayed(event.target.value)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<input\r\n      \ttype=\"text\"\r\n\t\t\tplaceholder=\"Search\"\r\n\t\t\tvalue={term}\t\t  \r\n\t\t\tonChange={handleChange}\r\n      />\r\n\t)\r\n}\r\n\r\n","import React from 'react';\r\nimport { useHover } from './useHover'\r\nimport { Link  } from 'react-router-dom'\r\n\r\n\r\nexport default function EpisodeLine({id, name, air_date, episode, characters}) {\r\n\r\n\tconst [hoverRef, hoverProps] = useHover();\r\n\r\n\treturn (\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\t<Link to={`/episode/${id}`}>{name}</Link>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{episode},  {air_date}\r\n\t\t\t\t</div>\r\n\t\t\t</td>\r\n\t\t\t<td style={{textAlign: 'center'}}>\r\n\t\t\t\t<div ref={hoverRef} style={{position: 'relative'}}>\r\n\t\t\t\t\t#{characters.length} \r\n\t\t\t\t\t{hoverProps.isHovered &&\r\n\t\t\t\t\t\t<button className=\"show-more\" title=\"Edit\" onClick={() => {}}>\r\n\t\t\t\t\t\t\tShow\r\n\t\t\t\t\t\t</button>}\r\n\t\t\t\t</div>\r\n\t\t\t</td>\r\n\t\t</tr>\t\t\r\n\t)\r\n}","import { useRef, useState, useEffect } from 'react';\r\n\r\n\r\n// Hook\r\nexport function useHover()  {\r\n\tconst [hoverProps, setValue] = useState({ isHovered: false });\r\n \r\n\tconst divRef = useRef(null);\r\n \r\n\tconst handleMouseOver = () => setValue({ isHovered: true });\r\n\tconst handleMouseOut = () => setValue({ isHovered: false });\r\n \r\n\tuseEffect(\r\n\t  () => {\r\n\t\t const node = divRef.current;\r\n\t\t if (node) {\r\n\t\t\tnode.addEventListener('mouseenter', () => handleMouseOver());\r\n\t\t\tnode.addEventListener('mouseleave', () => handleMouseOut());\r\n\t\t\treturn () => {\r\n\t\t\t\tnode.removeEventListener('mouseenter', () => handleMouseOver());\r\n\t\t\t\tnode.removeEventListener('mouseleave', () => handleMouseOut());\r\n\t\t\t};\r\n\t\t }\r\n\t  }, [divRef.current] // Recall only if ref changes\r\n\t);\r\n \r\n\treturn [divRef, hoverProps];\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport styled from \"styled-components\";\r\n\r\nimport Search from './Search'\r\nimport EpisodeLine from './EpisodeLine'\r\n\r\nimport { useQuery, gql } from '@apollo/client';\r\n\r\nconst GET_EPISODES = gql`\r\n\tquery episodes($page: Int, $filter: String) {\r\n\t\tepisodes(page: $page, filter: { name: $filter }) {\r\n\t\t\tresults {\r\n\t\t\t\tid\r\n\t\t\t\tname\r\n\t\t\t\tepisode\r\n\t\t\t\tair_date\r\n\t\t\t\tcharacters {\r\n\t\t\t\t\tid\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tinfo {\r\n\t\t\t\tnext\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst EpisodesCard = styled.div`\r\n\tposition: 'relative'\r\n\tbackground-color: gainsboro;\r\n\tborder-radius: 10px;\r\n\tbox-shadow: 3px 3px 25px -5px rgba(0,0,0,0.47);\r\n\tcolor: #1A1A1A;\r\n\tdisplay: inline-block;\r\n\tmargin: 20px 15px;\r\n\twidth: 98%;\r\n\toverflow: hidden;\r\n`;\r\n\r\n\r\nconst NavBar = styled.div`\r\n\tdisplay: flex;\r\n\tjustify-content: flex-end;\r\n\tmargin: 20px 15px;\r\n\twidth: 90%;\r\n\toverflow: hidden;\r\n`;\r\n\r\n\r\nconst Button = styled.button`\r\n\tfont-size: 1em;\r\n\tmargin: 1em;\r\n\tpadding: 0.25em 1em;\r\n\tborder-width: 1px;\r\n\tborder-radius: 3px;\r\n`;\r\n\r\n\r\nlet pg = 1;\r\nexport default function Episodes() {\r\n\tconst [page, setPage] = useState(1);\r\n\tconst [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n\tconsole.log ('zovem bre filter, page:', page, ' searchTerm:', searchTerm)\r\n\tconst { loading, error, data, fetchMore } = useQuery(GET_EPISODES, { \r\n\t\tvariables: { page: page, filter: searchTerm } \r\n\t});\r\n\tif (data)\r\n\t\tconsole.log('data', data)\r\n\t\r\n\tif (loading) return <p>Loading...</p>;\r\n\tif (error) return <p>Error :(</p>;\r\n\r\n\tconst onFetchMore = () => {\r\n\t\tpg++;\r\n\t\tfetchMore({\r\n\t\t\tvariables: {\r\n\t\t\t\tpage: pg,\r\n\t\t\t\tfilter: searchTerm\r\n\t\t\t},\r\n      \tfetchPolicy: \"cache-and-network\",\r\n\t\t\tupdateQuery: (previousResult, { fetchMoreResult }) => {\r\n\t\t\t\tif (!fetchMoreResult) \r\n\t\t\t\t\treturn previousResult;\r\n\t\t\t\treturn {\r\n\t\t\t\t\tepisodes: {\r\n\t\t\t\t\t\tresults: [\r\n\t\t\t\t\t  \t\t//...previousResult.episodes.results,\r\n\t\t\t\t\t  \t\t...fetchMoreResult.episodes.results,\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\tinfo: {\r\n\t\t\t\t\t\t\tnext: fetchMoreResult.episodes.info.next\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t \t}\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tconst results = (data && data.episodes.results) || [];\r\n\tconst hasMore = data && data.episodes.info.next;\r\n\treturn (\r\n\t\t<EpisodesCard>\r\n\r\n\t\t\t<div style={{padding:'5px 10px', width: '20%'}}>\r\n\t\t\t\t<Search searchTerm={searchTerm} onSearch={(val) => setSearchTerm(val)}></Search>\r\n\t\t\t</div>\r\n\r\n\t\t\t<table>\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t<tr sty>\r\n\t\t\t\t\t\t<th>Episode</th>\r\n\t\t\t\t\t\t<th style={{ textAlign: 'center', width: '130px'}}>#Characters</th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresults.map(episode => <EpisodeLine key={episode.id} {...episode} />)\r\n\t\t\t\t\t}\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t\r\n\t\t\t<NavBar>\r\n\t\t\t\t{results && hasMore &&\r\n\t\t\t\t\t<Button onClick={onFetchMore}> \r\n\t\t\t\t\t\tShow More Episodes\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t}\r\n\t\t\t\t{results && pg > 1 &&\r\n\t\t\t\t\t<Button onClick={() => { pg=1; setPage(0); }}> \r\n\t\t\t\t\t\tTop\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t}\r\n\t\t\t</NavBar>\r\n\r\n\t\t</EpisodesCard>\r\n\t)\r\n\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function Character({id, name, episode, image}) {\r\n\treturn <div key={id} className=\"item\">\r\n\t\t<img alt=\"Actor\" style={{ width:120, height: 120}} src={image}></img>\r\n\t\t<div>{name}</div>\r\n\t\t<div>Episodes: {episode.length}</div> \r\n\t</div>\r\n} ","import React from 'react';\r\nimport Character from './Character'\r\nimport'./CharacterList.css'\r\n\r\n\r\nexport default function CharacterList({characters}) {\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t{characters.map(character => <Character key={character.id} {...character} />)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport CharacterList from './CharacterList'\r\n\r\n\r\nimport { useQuery, gql } from '@apollo/client';\r\n\r\nconst EpisodeCard = styled.div`\r\n\tposition: 'relative'\r\n\tbackground-color: gainsboro;\r\n\tborder-radius: 10px;\r\n\tbox-shadow: 3px 3px 25px -5px rgba(0,0,0,0.47);\r\n\tcolor: #1A1A1A;\r\n\tdisplay: inline-block;\r\n\tmargin: 20px 15px;\r\n\tmmmax-width: 300px;\r\n\toverflow: hidden;\r\n`;\r\n\r\nconst EpisodeName = styled.div`\r\n  font-size: 1.66rem;\r\n`;\r\n\r\nconst EpisodeData = styled.div`\r\n  padding: 0 15px;\r\n`;\r\n\r\nconst GET_EPISODE = gql`\r\n\tquery episode($id: ID!) {\r\n\t\tepisode(id: $id) {\r\n\t\t\tid\r\n\t\t\tname\r\n\t\t\tair_date\r\n\t\t\tepisode\r\n\t\t\t created\r\n\t\t\tcharacters {\r\n\t\t\t  id\r\n\t\t\t  name\r\n\t\t\t  status\r\n\t\t\t  species\r\n\t\t\t  gender\r\n\t\t\t  location {\r\n\t\t\t\t name\r\n\t\t\t  }\r\n\t\t\t  image\r\n\t\t\t  created\r\n\t\t\t  episode {\r\n\t\t\t\t  id\r\n\t\t\t  }\r\n\t\t }\r\n\t\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport default function Episode() {\r\n\tlet { id } = useParams();\r\n\r\n\tconst { loading, error, data } = useQuery(GET_EPISODE, { \r\n\t\tvariables: { id } \r\n\t});\r\n\r\n\tif (data)\r\n\t\tconsole.log('data', data)\r\n\t\r\n\tif (loading) return <p>Loading...</p>;\r\n\tif (error) return <p>Error :(</p>;\r\n\r\n\tconst { name, air_date,\tepisode,\tcharacters} = data.episode;\r\n\r\n\treturn (\r\n\t\t<EpisodeCard>\r\n\r\n\t\t\t<EpisodeData>\r\n\t\t\t\t<EpisodeName>{name}</EpisodeName>\r\n\t\t\t\t<div>{episode}</div>\r\n\t\t\t\t<div>AIR DATE: {air_date}</div>\r\n\t\t\t</EpisodeData>\r\n\r\n\t\t\t<h4 style={{padding: '0px 15px'}}>Characters</h4>\r\n\t\t\t<CharacterList characters={characters} />\r\n\t\t\t<div style={{ position: 'absolute', right: '30px', top: '30px'}}>\r\n\t\t\t\t<Link to={`/`}>Back to Episodes</Link>\r\n\t\t\t</div>\r\n  \t\t</EpisodeCard>\r\n\t)\r\n}","import React from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport { \n\tApolloProvider, \n\tApolloClient, \n\tInMemoryCache\n} from '@apollo/client';\n\nimport { relayStylePagination } from \"@apollo/client/utilities\";\n\nimport Episodes from './components/Episodes'\nimport Episode from './components/Episode'\n\nconst client = new ApolloClient({\n\turi: \"https://rickandmortyapi.com/graphql\",\n\tcache: new InMemoryCache({\n\t  typePolicies: {\n\t\t Query: {\n\t\t\tfields: {\n\t\t\t  // Reusable helper function to generate a field\n\t\t\t  // policy for the Query.search field, keyed by\n\t\t\t  // search query:\n\t\t\t  search: relayStylePagination([\"query\"]),\n\t\t\t},\n\t\t },\n\t  },\n\t}),\n });\n\n\n\n\nfunction App() {\n  return (\n\t<Router>\n\t\t<ApolloProvider client={client}>\n\t\t\t<div>\n\t\t\t\t{/* <nav>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/\">Home</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\t\t\t\t\n\t\t\t\t</nav> */}\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/episode/:id\">\n\t\t\t\t\t\t<Episode />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t\t<Episodes />\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t \t</ApolloProvider>\n\t </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}