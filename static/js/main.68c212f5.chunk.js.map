{"version":3,"sources":["components/Search.js","components/GridStyling.js","components/BaseList.js","components/EpisodeLine.js","components/useHover.js","components/EpisodeList.js","components/Episodes.js","components/Character.js","components/CharacterList.js","components/Episode.js","App.js","serviceWorker.js","index.js"],"names":["Search","searchTerm","onSearch","useState","term","setTerm","delayed","debounce","t","type","placeholder","value","onChange","event","target","GridHeader","styled","div","HeaderRow","props","background","GridBody","Row","media","xs","styles","Col","justifyContent","size","collapse","BaseList","items","renderItem","loading","hasNextPage","EpisodeLine","id","name","air_date","episode","characters","isHovered","hoverProps","setValue","divRef","useRef","handleMouseOver","handleMouseOut","useEffect","node","current","addEventListener","removeEventListener","useHover","hoverRef","to","ref","style","position","length","className","title","onClick","GridParent","GET_EPISODES","gql","EpisodeList","useQuery","variables","page","filter","error","data","fetchMore","episodes","results","next","info","console","log","infiniteRef","useInfiniteScroll","onLoadMore","updateQuery","prevResult","fetchMoreResult","newEpisodes","produce","draft","push","scrollContainer","key","EpisodesCard","Episodes","setSearchTerm","padding","width","val","Character","image","alt","height","src","CharacterList","map","character","EpisodeCard","EpisodeName","EpisodeData","GET_EPISODE","Episode","useParams","right","top","client","ApolloClient","uri","cache","InMemoryCache","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.68c212f5.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {debounce} from 'lodash';\r\n\r\n\r\nexport default function Search({searchTerm, onSearch}) {\r\n\r\n\tconst [term, setTerm] = useState(searchTerm);\r\n\r\n\tconst delayed = debounce((t) => onSearch(t), 1000)\r\n\r\n\tconst handleChange = event => {\r\n\t\tsetTerm(event.target.value);\r\n\t\tdelayed(event.target.value)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<input\r\n      \ttype=\"text\"\r\n\t\t\tplaceholder=\"Search\"\r\n\t\t\tvalue={term}\t\t  \r\n\t\t\tonChange={handleChange}\r\n      />\r\n\t)\r\n}\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport const GridHeader = styled.div`\r\n`\r\n\r\nexport const HeaderRow = styled.div`\r\n\tdisplay: flex;\r\n\tborder-bottom: 1px solid silver;\r\n\talign-items: center;\r\n\tbackground:  ${(props) => props.background ?? 'transparent' };\r\n\tpadding: 5px 10px;\r\n\tcolor: white;\r\n\theight: 30px;\r\n`\r\n\r\nexport const GridBody = styled.div`\r\n`\r\n\r\nexport const Row = styled.div`\r\n\tdisplay: flex;\r\n\tborder-bottom: 1px solid silver;\r\n\tbackground:  ${(props) => props.background ?? 'transparent' };\r\n\tpadding: 5px 10px;\r\n\t:hover { background-color: #f5f5f5; }\r\n\t:nth-child(even) { background-color: #f2f2f2; }\r\n`\r\n\r\nconst media = {\r\n\txs: (styles) => `\r\n\t\t@media only screen and (max-width: 580px) {\r\n\t\t\t${styles}\r\n\t\t}\r\n\t`\r\n}\r\n\r\nexport const Col = styled.div`\r\n\tdisplay: flex;\r\n\tjustify-content: ${ (props) => props.justifyContent ?? \"flex-start\" }; \r\n\tflex: ${(props) => props.size };\r\n\t${(props) => props.collapse && media[props.collapse](`\r\n\t\tdisplay : none;\r\n\t`)}\r\n`\r\n\r\n\r\n","import React from \"react\";\r\nimport LoadingIndicator from \"./LoadingIndicator\";\r\nimport { Row, Col } from './GridStyling'\r\n\r\n\r\nfunction BaseList({ items = [], renderItem, loading, hasNextPage,  ...rest }) {\r\n\r\n  // const itemCount = items.length;\r\n  // const isInitialFetch = Boolean(loading && !itemCount);\r\n\r\n  return (\r\n\t//  <LoadingIndicator loading={isInitialFetch}>\r\n\t<>\r\n\t\t{items?.map((item, i) =>\r\n\t\t\titem ? renderItem(item, i)\t: null,\r\n\t\t)}\r\n\t\t\r\n\t\t{loading ? (\r\n\t\t\t<Row>\r\n\t\t\t\t<Col>\r\n\t\t\t\t\t<LoadingIndicator loading={loading} />\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t) : null}\r\n     {/* </LoadingIndicator> */}\r\n\t</>\r\n  );\r\n}\r\n\r\nexport default BaseList;\r\n","import React from 'react';\r\nimport { useHover } from './useHover'\r\nimport { Link  } from 'react-router-dom'\r\nimport { Row, Col } from './GridStyling'\r\n\r\nexport default function EpisodeLine({id, name, air_date, episode, characters}) {\r\n\r\n\tconst [hoverRef, hoverProps] = useHover();\r\n\r\n\treturn (\r\n\t\t<Row>\r\n\t\t\t<Col size={5}>\r\n\t\t\t\t<Link to={`/episode/${id}`}>{id} {name}</Link>\r\n\t\t\t</Col>\r\n\t\t\t<Col size={2} collapse=\"xs\">\r\n\t\t\t\t{episode}\r\n\t\t\t</Col>\r\n\t\t\t<Col size={3} collapse=\"xs\">\r\n\t\t\t\t{air_date}\r\n\t\t\t</Col>\r\n\t\t\t<Col size={3} justifyContent=\"center\">\r\n\t\t\t\t<div ref={hoverRef} style={{position: 'relative'}}>\r\n\t\t\t\t\t#{characters.length} \r\n\t\t\t\t\t{hoverProps.isHovered &&\r\n\t\t\t\t\t\t<button className=\"show-more\" title=\"Show characters\" onClick={() => {}}>\r\n\t\t\t\t\t\t\tShow\r\n\t\t\t\t\t\t</button>}\r\n\t\t\t\t</div>\r\n\t\t\t</Col>\r\n\t\t</Row>\t\t\r\n\t)\r\n}","import { useRef, useState, useEffect } from 'react';\r\n\r\n\r\n// Hook\r\nexport function useHover()  {\r\n\tconst [hoverProps, setValue] = useState({ isHovered: false });\r\n \r\n\tconst divRef = useRef(null);\r\n \r\n\tconst handleMouseOver = () => setValue({ isHovered: true });\r\n\tconst handleMouseOut = () => setValue({ isHovered: false });\r\n \r\n\tuseEffect(\r\n\t  () => {\r\n\t\t const node = divRef.current;\r\n\t\t if (node) {\r\n\t\t\tnode.addEventListener('mouseenter', () => handleMouseOver());\r\n\t\t\tnode.addEventListener('mouseleave', () => handleMouseOut());\r\n\t\t\treturn () => {\r\n\t\t\t\tnode.removeEventListener('mouseenter', () => handleMouseOver());\r\n\t\t\t\tnode.removeEventListener('mouseleave', () => handleMouseOut());\r\n\t\t\t};\r\n\t\t }\r\n\t  }, [divRef.current] // Recall only if ref changes\r\n\t);\r\n \r\n\treturn [divRef, hoverProps];\r\n}\r\n\r\n","import React from \"react\";\r\nimport produce from \"immer\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport useInfiniteScroll from \"react-infinite-scroll-hook\";\r\nimport { GridHeader, GridBody, HeaderRow, Col } from './GridStyling'\r\n\r\nimport BaseList from \"./BaseList\";\r\nimport EpisodeLine from \"./EpisodeLine\";\r\n\r\nconst GridParent = styled.div`\r\n\tborder: '1px solid silver';\r\n\tborder-top-width: 0;\r\n\toverflow-y: auto;\r\n\theight: 450px;\r\n`\r\n// calc(100vh - 170px);\r\n\r\nconst GET_EPISODES = gql`\r\n\tquery episodes($page: Int, $filter: String) {\r\n\t\tepisodes(page: $page, filter: { name: $filter }) {\r\n\t\t\tresults {\r\n\t\t\t\tid\r\n\t\t\t\tname\r\n\t\t\t\tepisode\r\n\t\t\t\tair_date\r\n\t\t\t\tcharacters {\r\n\t\t\t\t\tid\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tinfo {\r\n\t\t\t\tnext\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nfunction EpisodeList({ searchTerm }) {\r\n\r\n\tconst { loading, error, data, fetchMore } = useQuery(GET_EPISODES, { \r\n\t\tvariables: { page: 1, filter: searchTerm } \r\n\t});\r\n\r\n\tconst { episodes } = data || {};\r\n\tconst results = episodes?.results;\r\n\tconst next = episodes?.info?.next;\r\n\tconst hasNextPage = !!next;\r\n\r\n\tif (error) return <p>Error :(</p>;\r\n\r\n\tconsole.log(\"Episodes:\", episodes, \" loading: \", loading, \"hasNextPage: \", hasNextPage)\r\n\r\n\tfunction handleLoadMore() {\r\n\t\tfetchMore({\r\n\t\t\t// This breaks \"@apollo/client 3\".\r\n\t\t\t// It doesn't toggle \"loading\" even if the \"notifyOnNetworkStatusChange\" is set to \"true\".\r\n\t\t\t// query: GET_EPISODES,\r\n\t\t\tvariables: { page: next, filter: searchTerm },\r\n\t\t\tupdateQuery: (prevResult, { fetchMoreResult }) => {\r\n\t\t\t\tconst newEpisodes = fetchMoreResult?.episodes;\r\n\t\t\t\tconsole.log(newEpisodes?.results)\r\n\t\t\t\tconst newData = produce(prevResult, (draft) => {\r\n\t\t\t\t\tlet { episodes } = draft;\r\n\t\t\t\t\tif (episodes?.results && episodes?.info && newEpisodes?.results) {\r\n\t\t\t\t\t\tepisodes.results.push(...newEpisodes.results);\r\n\t\t\t\t\t\tepisodes.info = {...newEpisodes.info};\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn newData;\r\n\t\t\t},\r\n\t\t})\r\n\t}\r\n\r\n\t// eslint-disable-next-line react-hooks/rules-of-hooks\r\n\tconst infiniteRef = useInfiniteScroll({\r\n\t\tloading,\r\n\t\thasNextPage,\r\n\t\tonLoadMore: handleLoadMore,\r\n\t\tscrollContainer: \"parent\"\r\n\t});\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t<GridHeader>\r\n\t\t\t<HeaderRow background=\"gray\">\r\n\t\t\t\t<Col size={5}>\r\n\t\t\t\t\tEPISODE\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col size={2} collapse=\"xs\">\r\n\t\t\t\t\tCODE\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col size={3} collapse=\"xs\">\r\n\t\t\t\t\tAIR DATE\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col size={3} justifyContent=\"center\">\r\n\t\t\t\t\t#Characters\r\n\t\t\t\t</Col>\t\t\t\t\t\r\n\t\t\t</HeaderRow>\r\n\t\t</GridHeader>\r\n\t\t\t\r\n\t\t<GridParent>\r\n\t\t\t<GridBody ref={infiniteRef}>\r\n\t\t\t\t<BaseList\r\n\t\t\t\t\titems={results}\r\n\t\t\t\t\tloading={loading}\r\n\t\t\t\t\thasNextPage={hasNextPage}\r\n\t\t\t\t\trenderItem={episode => episode.id ? <EpisodeLine key={episode.id} {...episode} /> : null}\r\n\t\t\t\t>\r\n\t\t\t\t\t);\r\n\t\t\t\t</BaseList>\r\n\t\t\t</GridBody>\r\n\t\t</GridParent>\r\n\t\t</>\r\n\t);\r\n}\r\nexport default EpisodeList;\r\n","import React, { useState } from 'react';\r\nimport styled from \"styled-components\";\r\n\r\nimport Search from './Search'\r\nimport EpisodeList from './EpisodeList'\r\n\r\nconst EpisodesCard = styled.div`\r\n\t// position: 'relative';\r\n\tbackground-color: gainsboro;\r\n\tborder-radius: 10px;\r\n\tbox-shadow: 3px 3px 25px -5px rgba(0,0,0,0.47);\r\n\tcolor: #1A1A1A;\r\n\tdisplay: inline-block;\r\n\tmargin: 20px 15px;\r\n\twidth: 98%;\r\n\toverflow: hidden;\r\n`;\r\n\r\nexport default function Episodes() {\r\n\tconst [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n\treturn (\r\n\t\t<EpisodesCard>\r\n\r\n\t\t\t<div style={{padding:'5px 10px', width: '20%'}}>\r\n\t\t\t\t<Search searchTerm={searchTerm} onSearch={(val) => setSearchTerm(val)}></Search>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t<EpisodeList searchTerm={searchTerm} />\t\r\n\t\t\t{/* <InfiniteList scrollContainer=\"parent\" /> */}\r\n\r\n\t\t</EpisodesCard>\r\n\t)\r\n\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function Character({id, name, episode, image}) {\r\n\treturn <div key={id} className=\"item\">\r\n\t\t<img alt=\"Actor\" style={{ width:120, height: 120}} src={image}></img>\r\n\t\t<div>{name}</div>\r\n\t\t<div>Episodes: {episode.length}</div> \r\n\t</div>\r\n} ","import React from 'react';\r\nimport Character from './Character'\r\nimport'./CharacterList.css'\r\n\r\n\r\nexport default function CharacterList({characters}) {\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t{characters.map(character => <Character key={character.id} {...character} />)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport CharacterList from './CharacterList'\r\n\r\n\r\nimport { useQuery, gql } from '@apollo/client';\r\n\r\nconst EpisodeCard = styled.div`\r\n\tposition: 'relative'\r\n\tbackground-color: gainsboro;\r\n\tborder-radius: 10px;\r\n\tbox-shadow: 3px 3px 25px -5px rgba(0,0,0,0.47);\r\n\tcolor: #1A1A1A;\r\n\tdisplay: inline-block;\r\n\tmargin: 20px 15px;\r\n\tmmmax-width: 300px;\r\n\toverflow: hidden;\r\n`;\r\n\r\nconst EpisodeName = styled.div`\r\n  font-size: 1.66rem;\r\n`;\r\n\r\nconst EpisodeData = styled.div`\r\n  padding: 0 15px;\r\n`;\r\n\r\nconst GET_EPISODE = gql`\r\n\tquery episode($id: ID!) {\r\n\t\tepisode(id: $id) {\r\n\t\t\tid\r\n\t\t\tname\r\n\t\t\tair_date\r\n\t\t\tepisode\r\n\t\t\t created\r\n\t\t\tcharacters {\r\n\t\t\t  id\r\n\t\t\t  name\r\n\t\t\t  status\r\n\t\t\t  species\r\n\t\t\t  gender\r\n\t\t\t  location {\r\n\t\t\t\t name\r\n\t\t\t  }\r\n\t\t\t  image\r\n\t\t\t  created\r\n\t\t\t  episode {\r\n\t\t\t\t  id\r\n\t\t\t  }\r\n\t\t }\r\n\t\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport default function Episode() {\r\n\tlet { id } = useParams();\r\n\r\n\tconst { loading, error, data } = useQuery(GET_EPISODE, { \r\n\t\tvariables: { id } \r\n\t});\r\n\r\n\tif (data)\r\n\t\tconsole.log('data', data)\r\n\t\r\n\tif (loading) return <p>Loading...</p>;\r\n\tif (error) return <p>Error :(</p>;\r\n\r\n\tconst { name, air_date,\tepisode,\tcharacters} = data.episode;\r\n\r\n\treturn (\r\n\t\t<EpisodeCard>\r\n\r\n\t\t\t<EpisodeData>\r\n\t\t\t\t<EpisodeName>{name}</EpisodeName>\r\n\t\t\t\t<div>{episode}</div>\r\n\t\t\t\t<div>AIR DATE: {air_date}</div>\r\n\t\t\t</EpisodeData>\r\n\r\n\t\t\t<h4 style={{padding: '0px 15px'}}>Characters</h4>\r\n\t\t\t<CharacterList characters={characters} />\r\n\t\t\t<div style={{ position: 'absolute', right: '30px', top: '30px'}}>\r\n\t\t\t\t<Link to={`/`}>Back to Episodes</Link>\r\n\t\t\t</div>\r\n  \t\t</EpisodeCard>\r\n\t)\r\n}","import React from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\n// import BackToTop from './components/BackToTop'\n\nimport { \n\tApolloProvider, \n\tApolloClient, \n\tInMemoryCache\n} from '@apollo/client';\n\n// import { relayStylePagination } from \"@apollo/client/utilities\";\n\nimport Episodes from './components/Episodes'\nimport Episode from './components/Episode'\n\nconst client = new ApolloClient({\n\turi: \"https://rickandmortyapi.com/graphql\",\n\tcache: new InMemoryCache({\n\t//   typePolicies: {\n\t// \t Query: {\n\t// \t\tfields: {\n\t// \t\t  // Reusable helper function to generate a field\n\t// \t\t  // policy for the Query.search field, keyed by\n\t// \t\t  // search query:\n\t// \t\t  search: relayStylePagination([\"query\"]),\n\t// \t\t},\n\t// \t },\n\t//   },\n\t}),\n });\n\n\n\n\nfunction App() {\n  return (\n\t<Router>\n\t\t<ApolloProvider client={client}>\n\t\t\t<>\n\t\t\t<div>\n\t\t\t\t{/* <nav><ul><li><Link to=\"/\">Home</Link></li></ul></nav> */}\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/episode/:id\">\n\t\t\t\t\t\t<Episode />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t\t<Episodes />\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t\t{/* <BackToTop /> */}\n\t\t\t</>\n\t \t</ApolloProvider>\n\t </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}